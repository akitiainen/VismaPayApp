export class FormData {
  isGrossPayout?: boolean;
  isPep?: boolean;
  isRca?: boolean;
  signatories?: any[];
  companyBillingPostal?: string;
  eInvoiceProcessor?: string;
  businessDescription?: string;
  isAdditionalMerchantEmail?: boolean;
  companyName?: string;
  supportPhone?: string;
  bankIban?: string;
  bankName?: string;
  marketingName?: string;
  bankOwner?: string;
  giftcardsOrMembershipPercentage?: number;
  websiteUrlTest?: string;
  companyBillingCity?: string;
  customerRepresenterEmail?:	string;
  companyPhone?:	string;
  websiteUrl?:	string;
  customerRepresenterLastname?:	string;
  additionalInfo?:	string;
  companyBillingEmail?:	string;
  isGiftcardsOrMembership?:	boolean;
  isRefundV2?:	boolean;
  companyAddressStreet?:	string;
  channelId?:	number;
  channelName?:	string;
  averageServicePurchase?:	number;
  companyCity?:	string;
  companyPostal?:	string;
  giftcardsOrMembershipDuration?:	number;
  mostExpensiveServicePurchase?:	number;
  merchantEmail?:	string;
  eInvoiceAddress?:	string;
  estimatedTotalRevenue?:	number;
  additionalMerchantEmails?: string[];
  supportEmail?: string;
  companyBillingAddressStreet?: string;
  estimatedServiceRevenue?: number;
  realBeneficialOwners?: boolean;
  customerRepresenterPhone?: string;
  beneficialOwners?: any[];
  businessType?: number;
  customerRepresenterFirstName?: string;


  constructor(isGrossPayout?: boolean, isPep?: boolean, isRca?: boolean, signatories?: any[], companyBillingPostal?: string, eInvoiceProcessor?: string, businessDescription?: string, isAdditionalMerchantEmail?: boolean, companyName?: string, supportPhone?: string, bankIban?: string, bankName?: string, marketingName?: string, bankOwner?: string, giftcardsOrMembershipPercentage?: number, websiteUrlTest?: string, companyBillingCity?: string, customerRepresenterEmail?: string, companyPhone?: string, websiteUrl?: string, customerRepresenterLastname?: string, additionalInfo?: string, companyBillingEmail?: string, isGiftcardsOrMembership?: boolean, isRefundV2?: boolean, companyAddressStreet?: string, channelId?: number, channelName?: string, averageServicePurchase?: number, companyCity?: string, companyPostal?: string, giftcardsOrMembershipDuration?: number, mostExpensiveServicePurchase?: number, merchantEmail?: string, eInvoiceAddress?: string, estimatedTotalRevenue?: number, additionalMerchantEmails?: string[], supportEmail?: string, companyBillingAddressStreet?: string, estimatedServiceRevenue?: number, realBeneficialOwners?: boolean, customerRepresenterPhone?: string, beneficialOwners?: any[], businessType?: number, customerRepresenterFirstName?: string) {
    this.isGrossPayout = isGrossPayout;
    this.isPep = isPep;
    this.isRca = isRca;
    this.signatories = signatories;
    this.companyBillingPostal = companyBillingPostal;
    this.eInvoiceProcessor = eInvoiceProcessor;
    this.businessDescription = businessDescription;
    this.isAdditionalMerchantEmail = isAdditionalMerchantEmail;
    this.companyName = companyName;
    this.supportPhone = supportPhone;
    this.bankIban = bankIban;
    this.bankName = bankName;
    this.marketingName = marketingName;
    this.bankOwner = bankOwner;
    this.giftcardsOrMembershipPercentage = giftcardsOrMembershipPercentage;
    this.websiteUrlTest = websiteUrlTest;
    this.companyBillingCity = companyBillingCity;
    this.customerRepresenterEmail = customerRepresenterEmail;
    this.companyPhone = companyPhone;
    this.websiteUrl = websiteUrl;
    this.customerRepresenterLastname = customerRepresenterLastname;
    this.additionalInfo = additionalInfo;
    this.companyBillingEmail = companyBillingEmail;
    this.isGiftcardsOrMembership = isGiftcardsOrMembership;
    this.isRefundV2 = isRefundV2;
    this.companyAddressStreet = companyAddressStreet;
    this.channelId = channelId;
    this.channelName = channelName;
    this.averageServicePurchase = averageServicePurchase;
    this.companyCity = companyCity;
    this.companyPostal = companyPostal;
    this.giftcardsOrMembershipDuration = giftcardsOrMembershipDuration;
    this.mostExpensiveServicePurchase = mostExpensiveServicePurchase;
    this.merchantEmail = merchantEmail;
    this.eInvoiceAddress = eInvoiceAddress;
    this.estimatedTotalRevenue = estimatedTotalRevenue;
    this.additionalMerchantEmails = additionalMerchantEmails;
    this.supportEmail = supportEmail;
    this.companyBillingAddressStreet = companyBillingAddressStreet;
    this.estimatedServiceRevenue = estimatedServiceRevenue;
    this.realBeneficialOwners = realBeneficialOwners;
    this.customerRepresenterPhone = customerRepresenterPhone;
    this.beneficialOwners = beneficialOwners;
    this.businessType = businessType;
    this.customerRepresenterFirstName = customerRepresenterFirstName;
  }
}
